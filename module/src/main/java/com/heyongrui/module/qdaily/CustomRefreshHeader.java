package com.heyongrui.module.qdaily;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.util.AttributeSet;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.Interpolator;
import android.view.animation.LinearInterpolator;
import android.view.animation.Transformation;

import androidx.annotation.ColorInt;
import androidx.annotation.NonNull;

import com.heyongrui.module.R;
import com.scwang.smartrefresh.header.internal.pathview.PathsDrawable;
import com.scwang.smartrefresh.layout.api.RefreshHeader;
import com.scwang.smartrefresh.layout.api.RefreshKernel;
import com.scwang.smartrefresh.layout.api.RefreshLayout;
import com.scwang.smartrefresh.layout.constant.SpinnerStyle;
import com.scwang.smartrefresh.layout.internal.InternalAbstract;
import com.scwang.smartrefresh.layout.util.SmartUtil;

/**
 * 2019/9/26
 * lambert
 * 类似PhoenixHeader，自定义svg路径动画（https://www.pngtosvg.com/）
 */
public class CustomRefreshHeader extends InternalAbstract implements RefreshHeader {

    protected static final int ANIMATION_DURATION = 1000;
    protected static final float SUN_INITIAL_ROTATE_GROWTH = 1.2f;
    protected static final Interpolator LINEAR_INTERPOLATOR = new LinearInterpolator();

    protected static String[] townPaths = new String[]{
            "M325.129 1.485 C 324.091 2.302,322.969 3.684,322.638 4.557 C 322.267 5.531,321.215 6.323,319.911 6.609 C 316.879 7.275,314.983 9.997,314.983 13.683 L 314.983 16.725 324.337 16.725 C 335.069 16.725,337.243 15.773,338.677 10.451 C 340.746 2.765,331.381 -3.432,325.129 1.485 M334.913 3.763 C 338.603 7.453,337.846 11.832,333.093 14.290 C 330.141 15.817,316.376 15.785,316.376 14.251 C 316.376 11.189,319.052 8.362,321.951 8.362 C 322.737 8.362,323.723 7.356,324.507 5.755 C 326.870 0.930,331.243 0.093,334.913 3.763 M230.683 7.840 C 230.232 11.002,229.325 17.195,228.667 21.603 L 227.471 29.617 223.821 29.828 L 220.171 30.039 220.557 33.312 C 222.018 45.718,222.813 61.320,222.169 64.983 L 221.464 68.990 201.324 68.990 L 181.185 68.990 181.185 36.934 C 181.185 19.303,180.980 4.878,180.729 4.878 C 180.478 4.878,174.520 8.511,167.488 12.950 L 154.704 21.023 154.704 44.658 L 154.704 68.293 147.387 68.293 L 140.070 68.293 140.070 72.022 L 140.070 75.751 133.275 78.876 L 126.481 82.001 126.297 60.070 L 126.113 38.138 121.589 38.501 C 112.866 39.202,103.729 45.770,99.793 54.168 L 97.909 58.188 97.696 78.571 L 97.484 98.955 48.742 98.955 C 16.712 98.955,0.000 99.194,0.000 99.652 C 0.000 100.115,67.131 100.348,200.000 100.348 C 332.869 100.348,400.000 100.115,400.000 99.652 C 400.000 99.194,383.275 98.955,351.220 98.955 L 302.439 98.955 302.439 73.519 L 302.439 48.084 298.924 48.084 C 295.552 48.084,295.255 47.921,291.598 44.077 L 287.785 40.070 284.122 44.077 C 280.650 47.873,280.285 48.084,277.163 48.084 L 273.868 48.084 273.868 61.324 C 273.868 74.612,273.414 76.966,271.856 71.765 C 270.657 67.764,267.361 64.333,263.346 62.907 C 260.201 61.790,259.930 61.513,259.930 59.418 C 259.930 58.167,259.617 57.143,259.233 57.143 C 258.850 57.143,258.537 58.203,258.537 59.499 C 258.537 61.694,258.331 61.907,255.543 62.609 C 251.589 63.605,247.577 67.616,246.581 71.570 C 243.206 84.974,242.071 58.255,244.956 33.312 L 245.334 30.039 241.684 29.828 L 238.034 29.617 236.838 21.603 C 236.180 17.195,235.273 11.002,234.822 7.840 C 234.144 3.081,233.787 2.091,232.753 2.091 C 231.718 2.091,231.362 3.081,230.683 7.840 M179.791 53.310 L 179.791 98.955 177.352 98.955 L 174.913 98.955 174.913 64.808 C 174.913 42.509,174.671 30.662,174.216 30.662 C 173.761 30.662,173.519 42.509,173.519 64.808 L 173.519 98.955 171.080 98.955 L 168.641 98.955 168.641 64.808 C 168.641 42.509,168.399 30.662,167.944 30.662 C 167.489 30.662,167.247 42.509,167.247 64.808 L 167.247 98.955 164.808 98.955 L 162.369 98.955 162.369 64.808 C 162.369 42.509,162.128 30.662,161.672 30.662 C 161.217 30.662,160.976 42.509,160.976 64.808 L 160.976 98.955 158.537 98.955 L 156.098 98.955 156.098 60.723 L 156.098 22.492 167.770 15.100 C 174.190 11.035,179.521 7.699,179.617 7.687 C 179.713 7.675,179.791 28.206,179.791 53.310 M234.419 17.944 C 235.106 22.831,235.830 27.535,236.028 28.397 C 236.366 29.869,236.165 29.965,232.753 29.965 C 229.340 29.965,229.139 29.869,229.477 28.397 C 229.675 27.535,230.399 22.831,231.086 17.944 C 231.773 13.057,232.523 9.059,232.753 9.059 C 232.982 9.059,233.732 13.057,234.419 17.944 M226.927 33.275 C 226.737 33.946,226.018 38.571,225.328 43.554 L 224.073 52.613 223.585 47.038 C 223.317 43.972,222.916 39.347,222.694 36.760 L 222.290 32.056 224.781 32.056 C 226.820 32.056,227.209 32.277,226.927 33.275 M239.519 51.916 C 241.588 65.686,242.460 73.736,242.480 79.268 L 242.509 87.108 232.753 87.108 L 222.997 87.108 222.997 79.643 C 222.997 73.295,227.648 36.748,228.947 32.890 C 229.159 32.260,230.375 32.047,232.919 32.193 L 236.585 32.404 239.519 51.916 M242.956 35.017 C 242.731 36.646,242.338 41.045,242.083 44.793 C 241.827 48.540,241.534 51.519,241.431 51.413 C 241.327 51.307,240.735 47.613,240.115 43.206 C 239.495 38.798,238.833 34.486,238.644 33.624 C 238.337 32.222,238.570 32.056,240.832 32.056 L 243.364 32.056 242.956 35.017 M230.662 34.495 C 230.662 35.192,231.359 35.540,232.753 35.540 C 234.146 35.540,234.843 35.192,234.843 34.495 C 234.843 33.798,234.146 33.449,232.753 33.449 C 231.359 33.449,230.662 33.798,230.662 34.495 M229.965 40.070 C 229.965 40.825,230.739 41.115,232.753 41.115 C 234.766 41.115,235.540 40.825,235.540 40.070 C 235.540 39.315,234.766 39.024,232.753 39.024 C 230.739 39.024,229.965 39.315,229.965 40.070 M124.739 69.338 L 124.739 98.955 111.798 98.955 L 98.856 98.955 99.080 79.617 L 99.303 60.279 101.515 55.609 C 105.079 48.086,112.056 42.275,119.684 40.478 C 125.258 39.164,124.739 36.200,124.739 69.338 M53.605 43.152 C 51.937 44.820,51.568 45.777,51.568 48.432 C 51.568 54.381,53.838 55.749,63.709 55.749 L 71.777 55.749 71.777 52.930 C 71.777 49.930,69.433 46.690,67.264 46.690 C 66.664 46.690,65.804 45.882,65.355 44.895 C 63.474 40.769,56.956 39.801,53.605 43.152 M62.544 44.825 C 63.406 45.601,64.111 46.627,64.111 47.104 C 64.111 47.582,65.052 48.179,66.201 48.432 C 68.441 48.924,70.383 51.100,70.383 53.117 C 70.383 56.545,55.011 54.079,53.623 50.428 C 51.524 44.909,58.070 40.797,62.544 44.825 M289.670 44.774 C 292.470 47.884,292.358 48.084,287.811 48.084 L 283.553 48.084 285.413 45.645 C 287.606 42.769,287.825 42.724,289.670 44.774 M229.268 45.296 C 229.268 45.679,230.836 45.993,232.753 45.993 C 234.669 45.993,236.237 45.679,236.237 45.296 C 236.237 44.913,234.669 44.599,232.753 44.599 C 230.836 44.599,229.268 44.913,229.268 45.296 M228.571 50.523 C 228.571 51.336,229.501 51.568,232.753 51.568 C 236.005 51.568,236.934 51.336,236.934 50.523 C 236.934 49.710,236.005 49.477,232.753 49.477 C 229.501 49.477,228.571 49.710,228.571 50.523 M301.045 74.564 L 301.045 98.955 296.864 98.955 L 292.683 98.955 292.683 94.774 L 292.683 90.592 288.502 90.592 L 284.321 90.592 284.321 94.774 L 284.321 98.955 279.791 98.955 L 275.261 98.955 275.261 74.564 L 275.261 50.174 288.153 50.174 L 301.045 50.174 301.045 74.564 M227.178 56.098 C 227.178 56.940,228.262 57.143,232.753 57.143 C 237.244 57.143,238.328 56.940,238.328 56.098 C 238.328 55.256,237.244 55.052,232.753 55.052 C 228.262 55.052,227.178 55.256,227.178 56.098 M280.411 56.047 C 279.492 58.440,280.439 60.274,282.706 60.494 C 285.420 60.757,286.932 58.722,285.714 56.446 C 284.831 54.796,281.001 54.508,280.411 56.047 M290.614 56.405 C 289.373 58.724,290.860 60.759,293.600 60.494 C 295.630 60.297,295.819 60.071,295.819 57.840 C 295.819 54.806,292.029 53.762,290.614 56.405 M284.161 57.709 C 284.313 58.164,283.940 58.537,283.333 58.537 C 282.726 58.537,282.230 58.040,282.230 57.433 C 282.230 56.203,283.730 56.417,284.161 57.709 M294.077 57.491 C 294.077 58.066,293.606 58.537,293.031 58.537 C 291.943 58.537,291.649 57.712,292.451 56.911 C 293.252 56.109,294.077 56.403,294.077 57.491 M105.226 60.627 C 105.226 61.033,107.533 61.324,110.752 61.324 C 115.000 61.324,116.548 61.595,117.449 62.496 C 119.373 64.420,117.048 65.505,111.002 65.505 C 106.252 65.505,105.839 65.625,105.113 67.219 C 103.529 70.695,105.785 72.474,111.777 72.474 C 115.180 72.474,117.160 72.784,117.668 73.396 C 119.066 75.081,117.062 75.958,111.815 75.958 C 106.628 75.958,104.530 77.013,104.530 79.622 C 104.530 82.011,106.533 82.927,111.757 82.927 C 116.833 82.927,118.672 83.672,117.989 85.451 C 117.722 86.147,116.203 86.411,112.469 86.411 C 105.611 86.411,102.875 88.759,105.518 92.376 C 106.873 94.229,119.164 94.906,119.164 93.128 C 119.164 92.241,118.041 92.003,113.066 91.839 C 107.500 91.655,106.969 91.516,106.969 90.244 C 106.969 88.995,107.549 88.814,112.544 88.502 C 119.015 88.097,119.861 87.706,119.861 85.116 C 119.861 82.163,118.687 81.533,113.186 81.533 C 109.657 81.533,107.937 81.234,107.342 80.518 C 105.883 78.760,107.249 78.049,112.081 78.049 C 117.679 78.049,119.861 76.872,119.861 73.853 C 119.861 71.123,118.232 70.383,112.219 70.383 C 108.327 70.383,107.182 70.146,106.845 69.268 C 106.187 67.552,107.908 66.921,113.275 66.910 C 118.638 66.898,119.861 66.249,119.861 63.415 C 119.861 62.418,119.484 61.226,119.024 60.767 C 117.984 59.726,105.226 59.597,105.226 60.627 M226.481 61.324 C 226.481 61.737,229.036 62.021,232.753 62.021 C 236.469 62.021,239.024 61.737,239.024 61.324 C 239.024 60.911,236.469 60.627,232.753 60.627 C 229.036 60.627,226.481 60.911,226.481 61.324 M264.863 65.696 C 267.566 67.517,270.383 71.385,270.383 73.274 C 270.383 74.476,269.622 74.564,259.233 74.564 C 246.698 74.564,246.435 74.429,249.668 69.632 C 253.366 64.144,260.007 62.424,264.863 65.696 M225.784 66.551 C 225.784 67.410,227.023 67.596,232.753 67.596 C 238.482 67.596,239.721 67.410,239.721 66.551 C 239.721 65.691,238.482 65.505,232.753 65.505 C 227.023 65.505,225.784 65.691,225.784 66.551 M281.359 66.945 C 279.959 67.772,279.744 70.406,280.976 71.638 C 283.501 74.163,287.318 70.969,285.391 67.944 C 284.334 66.287,283.025 65.962,281.359 66.945 M291.033 67.676 C 288.989 70.593,292.444 73.999,295.160 71.745 C 296.601 70.550,296.404 67.772,294.819 66.923 C 292.875 65.883,292.194 66.019,291.033 67.676 M284.001 69.036 C 284.642 70.074,283.899 70.638,282.564 70.126 C 281.949 69.890,281.640 69.380,281.878 68.994 C 282.443 68.081,283.422 68.100,284.001 69.036 M294.428 68.994 C 294.667 69.380,294.358 69.890,293.742 70.126 C 292.408 70.638,291.664 70.074,292.306 69.036 C 292.885 68.100,293.863 68.081,294.428 68.994 M154.007 84.669 L 154.007 98.955 147.735 98.955 L 141.463 98.955 141.463 84.669 L 141.463 70.383 147.735 70.383 L 154.007 70.383 154.007 84.669 M220.908 72.300 C 220.910 72.970,220.066 79.242,219.033 86.237 L 217.156 98.955 212.062 98.955 L 206.969 98.955 206.969 95.787 C 206.969 90.317,201.980 87.219,198.606 90.592 C 197.584 91.614,197.213 92.915,197.213 95.470 L 197.213 98.955 189.547 98.955 L 181.882 98.955 181.882 85.017 L 181.882 71.080 201.394 71.080 C 219.511 71.080,220.906 71.167,220.908 72.300 M225.087 71.777 C 225.087 72.199,228.107 72.474,232.753 72.474 C 237.398 72.474,240.418 72.199,240.418 71.777 C 240.418 71.355,237.398 71.080,232.753 71.080 C 228.107 71.080,225.087 71.355,225.087 71.777 M144.948 77.003 C 144.948 77.758,145.722 78.049,147.735 78.049 C 149.748 78.049,150.523 77.758,150.523 77.003 C 150.523 76.249,149.748 75.958,147.735 75.958 C 145.722 75.958,144.948 76.249,144.948 77.003 M187.546 80.183 L 185.272 84.321 189.848 84.321 C 195.042 84.321,195.076 84.267,192.627 79.885 C 190.172 75.493,190.123 75.496,187.546 80.183 M199.370 79.780 C 196.626 84.641,196.459 84.321,201.742 84.321 C 204.233 84.321,206.272 84.159,206.272 83.962 C 206.272 83.479,202.015 75.958,201.742 75.958 C 201.624 75.958,200.556 77.678,199.370 79.780 M212.772 76.785 C 211.249 78.740,208.831 83.628,209.203 84.000 C 209.418 84.215,211.505 84.297,213.840 84.182 L 218.085 83.972 215.785 79.920 C 214.034 76.835,213.315 76.087,212.772 76.785 M273.868 87.456 L 273.868 98.955 270.035 98.955 L 266.202 98.955 266.202 91.638 C 266.202 85.598,266.020 84.321,265.157 84.321 C 264.294 84.321,264.111 85.598,264.111 91.638 L 264.111 98.955 262.021 98.955 L 259.930 98.955 259.930 91.638 C 259.930 87.224,259.654 84.321,259.233 84.321 C 258.813 84.321,258.537 87.224,258.537 91.638 L 258.537 98.955 256.446 98.955 L 254.355 98.955 254.355 91.638 C 254.355 85.598,254.173 84.321,253.310 84.321 C 252.447 84.321,252.265 85.598,252.265 91.638 L 252.265 98.955 250.301 98.955 L 248.337 98.955 246.799 88.328 C 245.954 82.483,245.270 77.308,245.279 76.829 C 245.292 76.161,248.627 75.958,259.582 75.958 L 273.868 75.958 273.868 87.456 M224.390 77.352 C 224.390 77.778,227.642 78.049,232.753 78.049 C 237.863 78.049,241.115 77.778,241.115 77.352 C 241.115 76.926,237.863 76.655,232.753 76.655 C 227.642 76.655,224.390 76.926,224.390 77.352 M140.070 88.502 L 140.070 98.955 138.328 98.955 C 136.614 98.955,136.585 98.862,136.585 93.380 C 136.585 88.889,136.382 87.805,135.540 87.805 C 134.698 87.805,134.495 88.889,134.495 93.380 C 134.495 98.490,134.379 98.955,133.101 98.955 C 131.823 98.955,131.707 98.490,131.707 93.380 C 131.707 88.889,131.504 87.805,130.662 87.805 C 129.820 87.805,129.617 88.889,129.617 93.380 C 129.617 98.862,129.588 98.955,127.875 98.955 L 126.132 98.955 126.132 91.795 L 126.132 84.634 132.578 81.382 C 136.124 79.594,139.260 78.112,139.547 78.090 C 139.834 78.067,140.070 82.753,140.070 88.502 M280.976 78.885 C 278.738 81.123,280.877 84.811,283.963 84.037 C 285.614 83.622,286.083 82.585,285.727 80.139 C 285.433 78.117,282.514 77.346,280.976 78.885 M291.533 78.582 C 289.639 79.792,290.190 83.496,292.344 84.037 C 294.466 84.569,296.167 83.325,296.167 81.239 C 296.167 78.637,293.679 77.211,291.533 78.582 M202.777 81.707 C 202.783 81.995,202.317 82.230,201.742 82.230 C 200.562 82.230,200.520 82.108,201.142 80.486 C 201.576 79.355,202.747 80.229,202.777 81.707 M144.948 81.185 C 144.948 81.940,145.722 82.230,147.735 82.230 C 149.748 82.230,150.523 81.940,150.523 81.185 C 150.523 80.430,149.748 80.139,147.735 80.139 C 145.722 80.139,144.948 80.430,144.948 81.185 M190.941 81.185 C 191.665 82.057,191.567 82.230,190.351 82.230 C 189.342 82.230,189.017 81.908,189.295 81.185 C 189.516 80.610,189.781 80.139,189.885 80.139 C 189.988 80.139,190.464 80.610,190.941 81.185 M214.189 81.185 C 214.467 81.908,214.142 82.230,213.133 82.230 C 211.917 82.230,211.819 82.057,212.544 81.185 C 213.021 80.610,213.496 80.139,213.600 80.139 C 213.703 80.139,213.969 80.610,214.189 81.185 M283.942 80.788 C 284.458 81.622,283.147 82.448,282.219 81.875 C 281.439 81.393,281.951 80.139,282.927 80.139 C 283.265 80.139,283.722 80.431,283.942 80.788 M294.395 80.788 C 294.911 81.622,293.600 82.448,292.672 81.875 C 291.892 81.393,292.404 80.139,293.380 80.139 C 293.718 80.139,294.175 80.431,294.395 80.788 M223.693 82.578 C 223.693 83.454,225.165 83.624,232.753 83.624 C 240.341 83.624,241.812 83.454,241.812 82.578 C 241.812 81.703,240.341 81.533,232.753 81.533 C 225.165 81.533,223.693 81.703,223.693 82.578 M144.948 85.366 C 144.948 86.121,145.722 86.411,147.735 86.411 C 149.748 86.411,150.523 86.121,150.523 85.366 C 150.523 84.611,149.748 84.321,147.735 84.321 C 145.722 84.321,144.948 84.611,144.948 85.366 M221.603 91.289 C 221.603 97.019,221.417 98.258,220.557 98.258 C 219.300 98.258,219.277 97.487,220.314 90.070 C 221.359 82.589,221.603 82.820,221.603 91.289 M245.949 96.341 C 245.978 97.600,245.634 98.258,244.948 98.258 C 244.081 98.258,243.917 97.039,243.990 91.115 L 244.078 83.972 244.992 89.199 C 245.494 92.073,245.925 95.287,245.949 96.341 M242.509 90.592 L 242.509 92.683 232.753 92.683 L 222.997 92.683 222.997 90.592 L 222.997 88.502 232.753 88.502 L 242.509 88.502 242.509 90.592 M204.042 92.125 C 204.502 92.585,204.878 94.310,204.878 95.958 L 204.878 98.955 201.742 98.955 L 198.606 98.955 198.606 96.217 C 198.606 92.170,201.733 89.817,204.042 92.125 M290.592 95.470 C 290.592 98.877,290.546 98.955,288.502 98.955 C 286.458 98.955,286.411 98.877,286.411 95.470 C 286.411 92.063,286.458 91.986,288.502 91.986 C 290.546 91.986,290.592 92.063,290.592 95.470 M242.509 96.516 L 242.509 98.258 232.753 98.258 L 222.997 98.258 222.997 96.516 L 222.997 94.774 232.753 94.774 L 242.509 94.774 242.509 96.516"
    };

    protected static int[] townColors = new int[]{
            0xffffffff,
    };

    protected static int[] skyColors = new int[]{
            0xff38adc1,
            0x88ffffff,
    };
    protected static String[] skyPaths = new String[]{
            "M0,0L1600,0L1600,1040L0,1040z",
            "m412,660v-4h76,76v4,4h-76,-76zM1200,654c0,-2 0.7,-2 76,-2 75.3,0 76,0 76,2 0,2 -0.7,2 -76,2 -75.3,0 -76,-0 -76,-2zM904,638c0,-2 0.7,-2 56,-2 55.3,0 56,0 56,2 0,2 -0.7,2 -56,2 -55.3,0 -56,-0 -56,-2zM184,610c0,-2 0.7,-2 72,-2 71.3,0 72,0 72,2 0,2 -0.7,2 -72,2 -71.3,0 -72,-0 -72,-2zM852,578c0,-2 0.7,-2 67.9,-2h67.9l1.2,-7.4c2.1,-13.2 11,-27.4 20,-32.1 2.3,-1.2 2.8,-2.3 3.4,-6.6 2.2,-18.8 21.7,-31.8 39.8,-26.6 3,0.9 6.7,2.6 8.2,3.7 1.5,1.2 2.8,2 2.9,1.8 6.9,-11.6 16.3,-20.9 26.7,-26.3 29.2,-15.4 64.5,-6.4 82.9,21 5.1,7.6 10.1,20.7 10.1,26.5 0,1.6 0.8,3.6 1.8,4.4 14.6,12.2 19,18.9 22,33.3L1208.5,576h195.8c195.1,0 195.8,0 195.8,2 0,2 -0.7,2 -197.9,2h-197.9l-0.6,-6.7c-1.2,-12.7 -9.2,-25.4 -20.5,-32.3 -4.8,-3 -4.8,-3 -5.4,-9.3 -1.6,-16.9 -13.5,-34.7 -29,-43.5 -16.9,-9.6 -38.9,-9.9 -56.2,-0.9 -8,4.2 -20.1,16.4 -24.4,24.5l-3.3,6.3 -3.9,-3.5c-5.3,-4.8 -10.3,-6.7 -17.5,-6.8 -14.6,-0.1 -26.2,10.6 -26.8,24.7 -0.2,4.9 -0.3,5.1 -5.8,8.6 -9.8,6.4 -17.2,19.5 -18.6,33L991.7,580L921.9,580C852.7,580 852,580 852,578ZM0,522c0,-2 0.7,-2 127.3,-2l127.3,-0 1.6,-8.2c2.2,-11.5 6.1,-19.1 13.3,-26.3C279,475.9 289.3,472 305.1,472c7.8,0 8,-0.1 9,-2.8 6.4,-17.3 20.6,-30.7 36.8,-34.7 3.7,-0.9 7.3,-2 8,-2.3 0.7,-0.4 2.6,-4 4.3,-8 7.9,-19.7 22,-34.6 41.4,-43.7 12.9,-6.1 21.5,-7.9 36,-7.8 9.9,0.1 13.6,0.6 21,2.8 21.3,6.3 38.3,19.5 49.5,38.5 4.5,7.5 6.5,12.7 8.9,22.5l1.7,7 5.9,0.7c21.7,2.4 40.5,19.7 46.1,42.3 1.4,5.6 2.1,6.8 5.5,9 6.3,4.2 11.3,12.3 13.3,21.8l0.6,2.8h71.5C735.3,520 736,520 736,522c0,2 -0.7,2 -73.4,2h-73.4l-1,-2.8c-0.6,-1.5 -1.6,-4.6 -2.3,-6.8 -0.7,-2.2 -2.3,-5.7 -3.7,-7.7C579.9,503.2 573.4,498 571.3,498c-0.6,0 -1.5,-2.6 -2.1,-5.8 -4.2,-23.5 -21.6,-40.7 -43.7,-43.2 -7.9,-0.9 -9.5,-1.8 -9.5,-5.6 -0,-4.3 -4.3,-17.3 -8.3,-24.8 -7,-13.5 -22.8,-28.3 -36.4,-34.2 -9.9,-4.3 -16.1,-5.6 -28.4,-6.2 -10.7,-0.5 -13.8,-0.2 -21,1.6 -28.5,7.2 -48.2,26.5 -57.4,56.4 -0.4,1.2 -1.6,1.8 -4.1,1.8 -5,0 -14.8,3.5 -20.9,7.4 -9.9,6.4 -18.3,17.6 -21,28.4l-1.1,4.3 -11.5,0.3c-7.7,0.2 -13.3,0.9 -17,2.1 -16.2,5.3 -26.1,18.4 -28.4,37.8L259.9,524L129.9,524C0.7,524 0,524 0,522ZM1208,396v-4h16,16v4,4h-16,-16zM1280,396v-4h74,74v4,4h-74,-74z",
    };

    protected static int[] sunColors = new int[]{
            0xfffef9e8,
            0xfff3e59c,
    };
    protected static String[] sunPaths = new String[]{
            "m109.1,226.62c-0.79,-0.95 -1.06,-6.89 -0.87,-19.14 0.24,-15.65 0.48,-17.89 2.02,-18.86 1.28,-0.8 2.22,-0.8 3.5,0 1.54,0.97 1.78,3.22 2.02,18.86C116.06,225.82 115.66,228 112,228c-0.97,0 -2.27,-0.62 -2.9,-1.38zM56.2,211.8c-0.66,-0.66 -1.2,-1.75 -1.2,-2.42 0,-0.67 3.91,-8 8.68,-16.3C71.62,179.3 72.61,178 75.16,178c5.4,0 4.68,3.34 -3.95,18.26 -4.35,7.52 -8.48,14.36 -9.18,15.2C60.5,213.3 57.85,213.45 56.2,211.8ZM165.97,211.47c-0.7,-0.84 -4.83,-7.68 -9.18,-15.2C148.16,181.34 147.43,178 152.84,178c2.56,0 3.55,1.3 11.48,15.08 4.78,8.3 8.68,15.63 8.68,16.3 0,3.33 -4.81,4.76 -7.03,2.08zM16.2,171.8c-1.65,-1.65 -1.5,-4.3 0.33,-5.83 0.84,-0.7 7.68,-4.83 15.2,-9.18C46.66,148.16 50,147.43 50,152.84c0,2.56 -1.3,3.55 -15.08,11.48C26.62,169.09 19.29,173 18.62,173 17.95,173 16.86,172.46 16.2,171.8ZM192.75,164.26C179.38,156.4 178,155.33 178,152.81c0,-5.44 3.35,-4.67 18.95,4.39 7.89,4.58 14.83,9.1 15.44,10.06 1.38,2.19 -0.25,5.15 -2.99,5.45 -1.04,0.12 -8.54,-3.69 -16.65,-8.46zM105.06,164.91C90.72,162.1 75.91,150.34 69.37,136.56 48.31,92.21 94.21,46.31 138.56,67.37c10.34,4.91 19.16,13.73 24.07,24.07 18.52,38.99 -15.04,81.81 -57.58,73.47zM125.2,156.89c12.02,-2.51 23.55,-11.32 29.53,-22.54 13.91,-26.1 -2.19,-58.49 -31.58,-63.53 -29.3,-5.02 -55.36,21.03 -50.33,50.33 4.23,24.68 27.93,40.85 52.38,35.74zM1.22,118.82C0.55,118.15 0,116.85 0,115.92c0,-3.57 2.26,-3.98 20.52,-3.7 15.65,0.24 17.89,0.48 18.86,2.02 0.8,1.28 0.8,2.22 -0,3.5 -0.97,1.54 -3.22,1.78 -19.02,2.02 -13.09,0.2 -18.25,-0.06 -19.14,-0.95zM189.22,118.82C188.55,118.15 188,116.85 188,115.92c0,-3.57 2.26,-3.98 20.52,-3.7 15.65,0.24 17.89,0.48 18.86,2.02 0.8,1.28 0.8,2.22 -0,3.5 -0.97,1.54 -3.22,1.78 -19.02,2.02 -13.09,0.2 -18.25,-0.06 -19.14,-0.95zM30.61,70.66c-7.64,-4.49 -14.39,-8.95 -14.99,-9.91 -1.28,-2.02 0.14,-5.06 2.59,-5.54 0.82,-0.16 8.31,3.63 16.64,8.43C48.51,71.51 50,72.63 50,75.08c0,2.57 -1.65,4.04 -4.33,3.84 -0.64,-0.05 -7.42,-3.76 -15.06,-8.25zM179.25,78.34C178.56,78.06 178,76.6 178,75.1c0,-2.48 1.44,-3.56 15.16,-11.46 8.34,-4.8 15.83,-8.59 16.64,-8.43 2.44,0.48 3.86,3.52 2.59,5.53 -1.22,1.93 -28.89,18.3 -30.73,18.18 -0.64,-0.04 -1.72,-0.31 -2.41,-0.58zM63.65,34.92C58.83,26.62 55.02,19.13 55.19,18.27c0.49,-2.51 3.51,-3.95 5.55,-2.66 0.96,0.6 5.48,7.55 10.06,15.44C79.85,46.65 80.63,50 75.19,50 72.66,50 71.62,48.63 63.65,34.92ZM149.46,47.69c-0.43,-1.71 1.57,-6.01 7.74,-16.65 4.58,-7.89 9.1,-14.83 10.06,-15.44 2.02,-1.27 5.05,0.15 5.53,2.59 0.16,0.82 -3.63,8.31 -8.43,16.64C156.39,48.7 155.39,50 152.84,50c-2.09,0 -2.95,-0.59 -3.38,-2.31zM109.1,38.62c-0.79,-0.95 -1.06,-6.89 -0.87,-19.14 0.24,-15.65 0.48,-17.89 2.02,-18.86 1.28,-0.8 2.22,-0.8 3.5,0 1.54,0.97 1.78,3.22 2.02,18.86C116.06,37.82 115.66,40 112,40c-0.97,0 -2.27,-0.62 -2.9,-1.38z",
            "M105.5,156.61C83.66,151.3 69.02,129.01 72.82,106.85 76.91,83 99.57,66.78 123.15,70.82c23.85,4.09 40.07,26.75 36.03,50.33 -4.31,25.12 -29.03,41.45 -53.68,35.46z"
    };
    //</editor-fold>

    protected Drawable mDrawableSun;
    protected Drawable mDrawableSky;
    protected Drawable mDrawableTown;
    protected Matrix mMatrix;
    protected float mPercent;
    protected float mRotate;
    protected int mHeight;
    protected int mHeaderHeight;
    protected int mBackgroundColor;
    protected int mSunSize;
    protected boolean isRefreshing;
    protected Animation mAnimation;
    protected RefreshKernel mKernel;

    public CustomRefreshHeader(Context context) {
        this(context, null);
    }

    public CustomRefreshHeader(Context context, AttributeSet attrs) {
        this(context, attrs, 0);
    }

    public CustomRefreshHeader(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);

        mMatrix = new Matrix();
        mSunSize = SmartUtil.dp2px(40);
        mBackgroundColor = skyColors[0];
        final View thisView = this;
        thisView.setMinimumHeight(SmartUtil.dp2px(100));

        mSpinnerStyle = SpinnerStyle.FixedBehind;


        //<editor-fold desc="setupAnimation">
        mAnimation = new Animation() {
            @Override
            public void applyTransformation(float interpolatedTime, Transformation t) {
                final View thisView = CustomRefreshHeader.this;
                mRotate = (interpolatedTime);
                thisView.invalidate();
            }
        };
        mAnimation.setRepeatCount(Animation.INFINITE);
        mAnimation.setRepeatMode(Animation.RESTART);
        mAnimation.setInterpolator(LINEAR_INTERPOLATOR);
        mAnimation.setDuration(ANIMATION_DURATION);
        //</editor-fold>

        //<editor-fold desc="setupPathsDrawable">
        int widthPixels = Resources.getSystem().getDisplayMetrics().widthPixels;
        PathsDrawable townDrawable = new PathsDrawable();
        townDrawable.parserColors(townColors);
        if (!townDrawable.parserPaths(townPaths)) {
            townDrawable.declareOriginal(1, 0, 1870, 416);
        }
//        townDrawable.printOriginal("townDrawable");
        mDrawableTown = townDrawable;
        Rect bounds = mDrawableTown.getBounds();
        mDrawableTown.setBounds(0, 0, widthPixels, widthPixels * bounds.height() / bounds.width());

        PathsDrawable skyDrawable = new PathsDrawable();
        skyDrawable.parserColors(skyColors);
        if (!skyDrawable.parserPaths(skyPaths)) {
            skyDrawable.declareOriginal(0, 0, 1600, 1040);
        }
//        skyDrawable.printOriginal("skyDrawable");
        mDrawableSky = skyDrawable;
        bounds = mDrawableSky.getBounds();
        mDrawableSky.setBounds(0, 0, widthPixels, widthPixels * bounds.height() / bounds.width());

        PathsDrawable sunDrawable = new PathsDrawable();
        sunDrawable.parserColors(sunColors);
        if (!sunDrawable.parserPaths(sunPaths)) {
            sunDrawable.declareOriginal(0, 0, 228, 228);
        }
//        sunDrawable.printOriginal("sunDrawable");
        mDrawableSun = sunDrawable;
        mDrawableSun.setBounds(0, 0, mSunSize, mSunSize);

        //</editor-fold>

        TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.PhoenixHeader);

        int primaryColor = ta.getColor(R.styleable.PhoenixHeader_phPrimaryColor, 0);
        int accentColor = ta.getColor(R.styleable.PhoenixHeader_phAccentColor, 0);
        if (primaryColor != 0) {
            mBackgroundColor = primaryColor;
            if (accentColor != 0) {
                skyDrawable.parserColors(primaryColor, accentColor);
            } else {
                skyDrawable.parserColors(primaryColor);
            }
        }

        ta.recycle();
    }

    //</editor-fold>

    //<editor-fold desc="RefreshHeader">

    @Override
    public void onInitialized(@NonNull RefreshKernel kernel, int height, int maxDragHeight) {
        mKernel = kernel;
        kernel.requestDrawBackgroundFor(this, mBackgroundColor);
    }

    @Override
    public void onMoving(boolean isDragging, float percent, int offset, int height, int maxDragHeight) {
        mHeight = offset;
        mHeaderHeight = height;
        mRotate = mPercent = 1f * offset / height;
        final View thisView = this;
        thisView.invalidate();
    }

    @Override
    public void onReleased(@NonNull RefreshLayout layout, int height, int maxDragHeight) {
        isRefreshing = true;
        final View thisView = this;
        thisView.startAnimation(mAnimation);
    }

    @Override
    public int onFinish(@NonNull RefreshLayout layout, boolean success) {
        final View thisView = this;
        isRefreshing = false;
        thisView.clearAnimation();
        return 0;
    }

    /**
     * @param colors 对应Xml中配置的 srlPrimaryColor srlAccentColor
     * @deprecated 请使用 {@link RefreshLayout#setPrimaryColorsId(int...)}
     */
    @Override
    @Deprecated
    public void setPrimaryColors(@ColorInt int... colors) {
        if (mDrawableSky instanceof PathsDrawable) {
            if (colors.length > 1) {
                mBackgroundColor = colors[0];
                ((PathsDrawable) mDrawableSky).parserColors(colors);
            } else if (colors.length > 0) {
                mBackgroundColor = colors[0];
                ((PathsDrawable) mDrawableSky).parserColors(colors[0], skyColors[1]);
            }
            if (mKernel != null) {
                mKernel.requestDrawBackgroundFor(this, mBackgroundColor);
            }
        }
    }

    //<editor-fold desc="draw">

    @Override
    protected void dispatchDraw(Canvas canvas) {

        final View thisView = this;
        final int width = thisView.getWidth();
        final int height = mHeight;//thisView.getHeight();
        //noinspection EqualsBetweenInconvertibleTypes
        final boolean footer = mKernel != null && (this.equals(mKernel.getRefreshLayout().getRefreshFooter()));

        if (footer) {
            canvas.save();
            canvas.translate(0, thisView.getHeight() - mHeight);
        }

        drawSky(canvas, width, height);
        drawSun(canvas, width);
        drawTown(canvas, width, height);

        if (footer) {
            canvas.restore();
        }
        super.dispatchDraw(canvas);
    }


    private void drawSky(Canvas canvas, int width, int height) {
        Matrix matrix = mMatrix;
        matrix.reset();

        int bWidth = mDrawableSky.getBounds().width();//mSky.getWidth();
        int bHeight = mDrawableSky.getBounds().height();//mSky.getHeight();
        float townScale = 1f * width / bWidth;
        float offsetX = 0;
        float offsetY = height / 2f - bHeight / 2f;

        final int saveCount = canvas.getSaveCount();
        canvas.save();
        canvas.translate(offsetX, offsetY);
        matrix.postScale(townScale, townScale);
        mDrawableSky.draw(canvas);
        canvas.restoreToCount(saveCount);
    }

    private void drawTown(Canvas canvas, int width, int height) {
        Matrix matrix = mMatrix;
        matrix.reset();

        int bWidth = mDrawableTown.getBounds().width();//mTown.getWidth();
        int bHeight = mDrawableTown.getBounds().height();//mTown.getHeight();
        float townScale = 1f * width / bWidth;
        float amplification = (0.3f * Math.max(mPercent - 1, 0) + 1);
        float offsetX = width / 2f - (int) (width * amplification) / 2f;
        float offsetY = mHeaderHeight * 0.1f * mPercent;
        townScale = amplification * townScale;

        if (offsetY + bHeight * townScale < height) {
            offsetY = height - bHeight * townScale;
        }

        final int saveCount = canvas.getSaveCount();
        canvas.save();
        canvas.translate(offsetX, offsetY);
        canvas.scale(townScale, townScale);
        mDrawableTown.draw(canvas);
        canvas.restoreToCount(saveCount);
    }

    private void drawSun(Canvas canvas, int width) {
        Matrix matrix = mMatrix;
        matrix.reset();


        float mSunLeftOffset = 0.3f * (float) width;
        float mSunTopOffset = (mHeaderHeight * 0.1f);

        float sunRadius = (float) mSunSize / 2.0f;
        float offsetX = mSunLeftOffset + sunRadius;
        float offsetY = mSunTopOffset + (mHeaderHeight / 2f) * (1.0f - Math.min(mPercent, 1)); // Move the sun up

        int bWidth = mDrawableSun.getBounds().width();
        float sunScale = 1f * mSunSize / bWidth;

        if (mPercent > 1) {
            sunScale = sunScale * (1.0f - 0.5f * (mPercent - 1));
            sunRadius = sunRadius * (1.0f - 0.5f * (mPercent - 1));
        }

        matrix.preScale(sunScale, sunScale);
        matrix.postRotate((isRefreshing ? -360 : 360) * mRotate * (isRefreshing ? 1 : SUN_INITIAL_ROTATE_GROWTH),
                sunRadius,
                sunRadius);

        final int saveCount = canvas.getSaveCount();
        canvas.save();
        canvas.translate(offsetX, offsetY);
        canvas.concat(matrix);
        mDrawableSun.draw(canvas);
        canvas.restoreToCount(saveCount);
    }
}
